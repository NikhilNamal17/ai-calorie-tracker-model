# -*- coding: utf-8 -*-
"""ai_calorie_tracker_api.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A0r9nS0aXhaA_mXWqWjHCLA5fMKp0cN5
"""

# from flask_ngrok import run_with_ngrok
from tensorflow.keras.models import load_model
from keras.preprocessing.image import img_to_array
from keras.applications import imagenet_utils
from PIL import Image
import numpy as np
import flask
import io

# initialize our Flask application and the Keras model
app = flask.Flask(__name__)
# run_with_ngrok(app)

def loadmodel():
    # load the pre-trained Keras model (here we are using a model
    # pre-trained on ImageNet and provided by Keras, but you can
    # substitute in your own networks just as easily)
    global model
    model = load_model('/content/drive/My Drive/model_trained_5class.hdf5',compile = False)

def prepare_image(image, target):
    # if the image mode is not RGB, convert it
    if image.mode != "RGB":
        image = image.convert("RGB")

    # resize the input image and preprocess it
    image = image.resize(target)
    image = img_to_array(image)
    image = np.expand_dims(image, axis=0)
    image /= 255.

    # return the processed image
    return image

def predict_class(model, images, show = True):
  food_list = ['dosa','idli','pav_bhaji','samosa','vada_pav']
  # images /= 255.
  pred = model.predict(images)
  # print("Pred ", pred)
  index = np.argmax(pred)
  # print("index ", index)
  food_list.sort()
  pred_value = food_list[index]

  return pred_value



@app.route('/', methods=['GET'])
def home():
    return "<h1>Ai Calorie Tracker</h1><p>This site is a prototype API for tracking your food calories</p>"


@app.route("/predict", methods=["POST"])
def predict():
    # initialize the data dictionary that will be returned from the
    # view
    data = {"success": False}

    # ensure an image was properly uploaded to our endpoint
    if flask.request.method == "POST":
        if flask.request.files.get("image"):
            # read the image in PIL format
            image = flask.request.files["image"].read()
            
            image = Image.open(io.BytesIO(image))
            

            # preprocess the image and prepare it for classification
            image = prepare_image(image, target=(299, 299))
           

            response = predict_class(model, image, True)

            # classify the input image and then initialize the list
            # of predictions to return to the client
            data["predictions"] = [response]


            # indicate that the request was a success
            data["success"] = True

    # return the data dictionary as a JSON response
    return flask.jsonify(data)

if __name__ == "__main__":
    print(("* Loading Keras model and Flask starting server..."
        "please wait until server has fully started"))
    loadmodel()
    app.run()